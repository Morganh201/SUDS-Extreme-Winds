prop_0 = 1 - mean(sample_data$cluster1) - mean(sample_data$cluster2) - mean(sample_data$cluster3) -
mean(sample_data$cluster4) - mean(sample_data$cluster5) - mean(sample_data$cluster6)
prop = c(prop_0, mean(sample_data$cluster1), mean(sample_data$cluster2), mean(sample_data$cluster3),
mean(sample_data$cluster4), mean(sample_data$cluster5), mean(sample_data$cluster6))
cluster0 = sample_data %>% filter(low.level_wind <= 22)
cluster1 = sample_data %>% filter(cluster1 == 1)
cluster2 = sample_data %>% filter(cluster2 == 1)
cluster3 = sample_data %>% filter(cluster3 == 1)
cluster4 = sample_data %>% filter(cluster4 == 1)
cluster5 = sample_data %>% filter(cluster5 == 1)
cluster6 = sample_data %>% filter(cluster6 == 1)
prob = 0.95
t0 = quantile(cluster0$surface_wind, prob = prob)
t1 = quantile(cluster1$surface_wind, prob = prob)
t2 = quantile(cluster2$surface_wind, prob = prob)
t3 = quantile(cluster3$surface_wind, prob = prob)
t4 = quantile(cluster4$surface_wind, prob = prob)
t5 = quantile(cluster5$surface_wind, prob = prob)
t6 = quantile(cluster6$surface_wind, prob = prob)
fit = fevd(surface_wind, sample_data, threshold = c(t0, t1-t0, t2-t0, t3-t0, t4-t0, t5-t0, t6-t0),
threshold.fun = ~ cluster1 + cluster2 + cluster3 + cluster4 + cluster5 + cluster6,
location.fun = ~ cluster1 + cluster2 + cluster3 + cluster4 + cluster5 + cluster6, type="PP")
clusters = 1:7
return(uniroot(function(z) joint_rl(z, fit) - 1/return_period, lower = 0, upper = 100)$root)
}
results <- foreach(i = c(2*7, 20*7, 50*7, 75*7, 100*7), .combine = rbind,
.packages = c("dplyr", "extRemes")) %dopar% {
replicate(1000, bootstrap_joint_rl(wind_speed, i))
}
stopCluster(cl)
load("C:/Users/morga/SUDS-Extreme-Winds/Full Project.RData")
temp = results
lower_ci = c(quantile(temp[1, ], prob = 0.025), quantile(temp[2, ], prob = 0.025),
quantile(temp[3, ], prob = 0.025), quantile(temp[4, ], prob = 0.025),
quantile(temp[5, ], prob = 0.025))
upper_ci = c(quantile(temp[1, ], prob = 0.975), quantile(temp[2, ], prob = 0.975),
quantile(temp[3, ], prob = 0.975), quantile(temp[4, ], prob = 0.975),
quantile(temp[5, ], prob = 0.975))
estimate = c(uniroot(function(z) joint_rl(z, fit10) - 1/(2*7), lower = 0, upper = 100)$root,
uniroot(function(z) joint_rl(z, fit10) - 1/(20*7), lower = 0, upper = 100)$root,
uniroot(function(z) joint_rl(z, fit10) - 1/(50*7), lower = 0, upper = 100)$root,
uniroot(function(z) joint_rl(z, fit10) - 1/(75*7), lower = 0, upper = 100)$root,
uniroot(function(z) joint_rl(z, fit10) - 1/(100*7), lower = 0, upper = 100)$root)
temp_df = data.frame(
return_period = c(2, 20, 50, 75, 100),
lower_ci = lower_ci,
upper_ci = upper_ci,
estimate = estimate
)
ggplot(temp_df, aes(x = return_period, y = estimate)) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), fill = "lightblue", alpha = 0.4) +
geom_line(color = "blue", size = 0.8) +
geom_point(color = "darkblue", size = 1.5) +
labs(
title = "Return Level Plot with 95% Bootstrap Confidence Intervals",
x = "Return Period (years)",
y = "Wind Speed Return Level (m/s)"
) +
theme_minimal()
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
bootstrap_joint_rl = function(data, return_period) {
sample_data = data[sample(1:nrow(data), replace = TRUE), ]
prop_0 = 1 - mean(sample_data$cluster1) - mean(sample_data$cluster2) - mean(sample_data$cluster3) -
mean(sample_data$cluster4) - mean(sample_data$cluster5) - mean(sample_data$cluster6)
prop = c(prop_0, mean(sample_data$cluster1), mean(sample_data$cluster2), mean(sample_data$cluster3),
mean(sample_data$cluster4), mean(sample_data$cluster5), mean(sample_data$cluster6))
cluster0 = sample_data %>% filter(low.level_wind <= 22)
cluster1 = sample_data %>% filter(cluster1 == 1)
cluster2 = sample_data %>% filter(cluster2 == 1)
cluster3 = sample_data %>% filter(cluster3 == 1)
cluster4 = sample_data %>% filter(cluster4 == 1)
cluster5 = sample_data %>% filter(cluster5 == 1)
cluster6 = sample_data %>% filter(cluster6 == 1)
prob = 0.95
t0 = quantile(cluster0$surface_wind, prob = prob)
t1 = quantile(cluster1$surface_wind, prob = prob)
t2 = quantile(cluster2$surface_wind, prob = prob)
t3 = quantile(cluster3$surface_wind, prob = prob)
t4 = quantile(cluster4$surface_wind, prob = prob)
t5 = quantile(cluster5$surface_wind, prob = prob)
t6 = quantile(cluster6$surface_wind, prob = prob)
fit = fevd(surface_wind, sample_data, threshold = c(t0, t1-t0, t2-t0, t3-t0, t4-t0, t5-t0, t6-t0),
threshold.fun = ~ cluster1 + cluster2 + cluster3 + cluster4 + cluster5 + cluster6,
location.fun = ~ cluster1 + cluster2 + cluster3 + cluster4 + cluster5 + cluster6, type="PP")
clusters = 1:7
return(uniroot(function(z) joint_rl(z, fit) - 1/return_period, lower = 0, upper = 100)$root)
}
results <- foreach(i = c(2*7, 20*7, 50*7, 75*7, 100*7), .combine = rbind,
.packages = c("dplyr", "extRemes")) %dopar% {
replicate(1000, bootstrap_joint_rl(wind_speed, i))
}
stopCluster(cl)
temp = results
lower_ci = c(quantile(temp[1, ], prob = 0.025), quantile(temp[2, ], prob = 0.025),
quantile(temp[3, ], prob = 0.025), quantile(temp[4, ], prob = 0.025),
quantile(temp[5, ], prob = 0.025))
upper_ci = c(quantile(temp[1, ], prob = 0.975), quantile(temp[2, ], prob = 0.975),
quantile(temp[3, ], prob = 0.975), quantile(temp[4, ], prob = 0.975),
quantile(temp[5, ], prob = 0.975))
estimate = c(uniroot(function(z) joint_rl(z, fit10) - 1/(2*7), lower = 0, upper = 100)$root,
uniroot(function(z) joint_rl(z, fit10) - 1/(20*7), lower = 0, upper = 100)$root,
uniroot(function(z) joint_rl(z, fit10) - 1/(50*7), lower = 0, upper = 100)$root,
uniroot(function(z) joint_rl(z, fit10) - 1/(75*7), lower = 0, upper = 100)$root,
uniroot(function(z) joint_rl(z, fit10) - 1/(100*7), lower = 0, upper = 100)$root)
temp_df = data.frame(
return_period = c(2, 20, 50, 75, 100),
lower_ci = lower_ci,
upper_ci = upper_ci,
estimate = estimate
)
ggplot(temp_df, aes(x = return_period, y = estimate)) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), fill = "lightblue", alpha = 0.4) +
geom_line(color = "blue", size = 0.8) +
geom_point(color = "darkblue", size = 1.5) +
labs(
title = "Return Level Plot with 95% Bootstrap Confidence Intervals",
x = "Return Period (years)",
y = "Wind Speed Return Level (m/s)"
) +
theme_minimal()
save.image("Full Project.RData")
extreme_winds %>% mutate(thermal_wind = np.sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
wind_speed$Month = month(wind_speed$valid_time)
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
extreme_winds = extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = subset(extreme_winds, select = -c(pressure_level, latitude, longitude, Year, Month, day_of_year))
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
extreme_winds = extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = subset(extreme_winds, select = -c(pressure_level, latitude, longitude, Month, day_of_year))
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
extreme_winds = extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = subset(extreme_winds, select = -c(pressure_level, latitude, longitude, Month))
extreme_winds
wind_speed = read.csv("pearson_wind_data.csv")
wind_speed$valid_time = as.Date(wind_speed$valid_time, format = "%Y-%m-%d")
wind_speed$Year = year(wind_speed$valid_time)
wind_speed$Month = month(wind_speed$valid_time)
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
extreme_winds = extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = subset(extreme_winds, select = -c(pressure_level, latitude, longitude, Year, Month, day_of_year))
extreme_winds
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
extreme_winds = extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = subset(extreme_winds, select = -c(pressure_level, latitude, longitude, Year, Month, day_of_year))
extreme_winds
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
extreme_winds = extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = subset(extreme_winds, select = -c(pressure_level, latitude, longitude, Year, Month))
extreme_winds
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
extreme_winds = extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = subset(extreme_winds, select = -c(pressure_level, latitude, longitude, Year, Month, valid_time))
extreme_winds
library(rattle)
regress_anova = rpart(surface_wind ~ ., extreme_winds, method = "anova",
control = rpart.control(cp=0, minsplit=25, minbucket=15, maxcompete=0, maxsurrogate=0))
regress_anova_prune = prune(regress_anova, cp = 0.01)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
rpart.plot(regress_anova, branch = 0.3)
regress_anova_prune = prune(regress_anova, cp = 0.005)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
library(rattle)
regress_anova = rpart(surface_wind ~ ., extreme_winds, method = "anova",
control = rpart.control(cp=0, minsplit=25, minbucket=15, maxcompete=0, maxsurrogate=0))
regress_anova_prune = prune(regress_anova, cp = 0.01)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
library(rattle)
regress_anova = rpart(surface_wind ~ ., extreme_winds, method = "anova",
control = rpart.control(cp=0, minsplit=25, minbucket=15, maxcompete=0, maxsurrogate=0))
regress_anova_prune = prune(regress_anova, cp = 0.005)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
library(rattle)
regress_anova = rpart(surface_wind ~ ., extreme_winds, method = "anova",
control = rpart.control(cp=0, minsplit=25, minbucket=15, maxcompete=0, maxsurrogate=0))
regress_anova_prune = prune(regress_anova, cp = 0.01)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
temp <- data.frame(
time = wind_speed$valid_time,
wind_speed = as.numeric(wind_speed$surface_wind),
threshold = c(fit10$threshold, rep(NA, length(wind_speed$surface_wind) - length(fit10$threshold)))  # pad with NA if needed
)
temp_long = data.frame(
time = rep(temp$time[1:365], 2),
y = c(temp$wind_speed[1:365], temp$threshold[1:365]),
group = rep(c("Surface Wind", "Threshold (95th percentile)"), each = 2000)
)
temp <- data.frame(
time = wind_speed$valid_time,
wind_speed = as.numeric(wind_speed$surface_wind),
threshold = c(fit10$threshold, rep(NA, length(wind_speed$surface_wind) - length(fit10$threshold)))  # pad with NA if needed
)
temp_long = data.frame(
time = rep(temp$time[1:365], 2),
y = c(temp$wind_speed[1:365], temp$threshold[1:365]),
group = rep(c("Surface Wind", "Threshold (95th percentile)"), each = 365)
)
ggplot(temp_long, aes(x = time, y = y, color = group)) +
geom_line() +
labs(title = "Wind Speeds Plotted with Threshold Selection (First 2000 days)", color = "Legend",
x = "Time", y = "Surface Wind Speed") +
theme_minimal() +
theme(
legend.position = c(0.85, 0.85),  # x and y coordinates inside plot
legend.background = element_rect(fill = "white", color = "black")  # optional styling
)
temp <- data.frame(
time = wind_speed$valid_time,
wind_speed = as.numeric(wind_speed$surface_wind),
threshold = c(fit10$threshold, rep(NA, length(wind_speed$surface_wind) - length(fit10$threshold)))  # pad with NA if needed
)
temp_long = data.frame(
time = rep(temp$time[1:365], 2),
y = c(temp$wind_speed[1:365], temp$threshold[1:365]),
group = rep(c("Surface Wind", "Threshold (95th percentile)"), each = 365)
)
ggplot(temp_long, aes(x = time, y = y, color = group)) +
geom_line() +
labs(title = "Wind Speeds Plotted with Threshold Selection (Year 1979)", color = "Legend",
x = "Time", y = "Surface Wind Speed") +
theme_minimal() +
theme(
legend.position = c(0.85, 0.85),  # x and y coordinates inside plot
legend.background = element_rect(fill = "white", color = "black")  # optional styling
)
wind_speed
a = wind_speed %>% select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad)
corr(a)
a = wind_speed %>% select(c(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad))
corr(a)
a = wind_speed %>% select((surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad))
corr(a)
a = wind_speed %>% select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad)
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad)
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad)
corr(a)
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad)
library(corrplot)
cor_matrix = cor(a)
corrplot(cor_matrix)
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad)
library(corrplot)
cor_matrix = cor(a)
corrplot(cor_matrix, method = "shade")
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad) %>% filter(surface_wind > 8.5)
library(corrplot)
cor_matrix = cor(a)
corrplot(cor_matrix, method = "shade")
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad) %>% filter(surface_wind > 8.5)
library(corrplot)
cor_matrix = cor(a)
corrplot(cor_matrix, method = "shade")
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad) %>% filter(surface_wind > 8.5)
library(corrplot)
cor_matrix = cor(a)
heatmap(cor_matrix)
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad) %>% filter(surface_wind > 8.5)
library(corrplot)
cor_matrix = cor(a)
ggcorrplot(cor_matrix)
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad) %>% filter(surface_wind > 8.5)
library(ggcorrplot)
cor_matrix = cor(a)
ggcorrplot(cor_matrix)
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad) %>% filter(surface_wind > 8.5)
library(ggcorrplot)
cor_matrix = cor(a)
corrplot(cor_matrix, method = "number")
a = wind_speed %>% dplyr::select(surface_wind, low.level_wind, jet_stream, atmos_stability1, atmos_stability2, thermal_wind_y_grad, thermal_wind_x_grad)
library(ggcorrplot)
cor_matrix = cor(a)
corrplot(cor_matrix, method = "number")
library(extRemes)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(MASS)
library(evdbayes)
library(mev)
library(boot)
library(tibble)
library(rpart)
library(rpart.plot)
wind_speed = read.csv("pearson_wind_data.csv")
wind_speed$valid_time = as.Date(wind_speed$valid_time, format = "%Y-%m-%d")
wind_speed$Year = year(wind_speed$valid_time)
wind_speed$Month = month(wind_speed$valid_time)
extreme_winds = wind_speed %>% filter(surface_wind > 8.5)
extreme_winds = extreme_winds %>% mutate(summer_index = case_when(Month %in% c(6, 7, 8) ~ 1,
TRUE ~ 0))
extreme_winds = extreme_winds %>% mutate(thermal_wind = sqrt(thermal_wind_x_grad^2 + thermal_wind_y_grad^2))
extreme_winds = subset(extreme_winds, select = -c(pressure_level, latitude, longitude, Year, Month, valid_time))
extreme_winds
library(rattle)
regress_anova = rpart(surface_wind ~ ., extreme_winds, method = "anova",
control = rpart.control(cp=0, minsplit=25, minbucket=15, maxcompete=0, maxsurrogate=0))
regress_anova_prune = prune(regress_anova, cp = 0.01)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
library(rattle)
regress_anova = rpart(surface_wind ~ ., extreme_winds, method = "anova",
control = rpart.control(cp=0, minsplit=25, minbucket=15, maxcompete=0, maxsurrogate=0))
regress_anova_prune = prune(regress_anova, cp = 0.005)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
library(rattle)
regress_anova = rpart(surface_wind ~ ., extreme_winds, method = "anova",
control = rpart.control(cp=0, minsplit=25, minbucket=15, maxcompete=0, maxsurrogate=0))
regress_anova_prune = prune(regress_anova, cp = 0.01)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
wind_speed = read.csv("pearson_wind_data.csv")
wind_speed$valid_time = as.Date(wind_speed$valid_time, format = "%Y-%m-%d")
wind_speed$Year = year(wind_speed$valid_time)
wind_speed$Month = month(wind_speed$valid_time)
library(rattle)
regress_anova = rpart(surface_wind ~ ., extreme_winds, method = "anova",
control = rpart.control(cp=0, minsplit=25, minbucket=15, maxcompete=0, maxsurrogate=0))
regress_anova_prune = prune(regress_anova, cp = 0.01)
#rpart.plot(regress_anova, branch = 0.3)
#fancyRpartPlot(regress_anova_prune)
rpart.plot(regress_anova_prune, branch = 0.3, compress = TRUE, extra = 101)
wind_speed = wind_speed %>% mutate(cluster1 = case_when(low.level_wind > 22 & low.level_wind <= 33 ~ 1,
TRUE ~ 0),
cluster2 = case_when(low.level_wind >= 33 & low.level_wind < 39 & thermal_wind_y_grad < 6.3 ~ 1,
TRUE ~ 0),
cluster3 = case_when(low.level_wind >= 33 & low.level_wind < 39 & thermal_wind_y_grad >= 6.3 &
thermal_wind_x_grad > -0.32 ~ 1,
TRUE ~ 0),
cluster4 = case_when(low.level_wind >= 33 & low.level_wind < 39 & thermal_wind_y_grad >= 6.3 &
thermal_wind_x_grad <= -0.32 ~ 1,
TRUE ~ 0),
cluster5 = case_when(low.level_wind >= 39 & low.level_wind < 43 ~ 1,
TRUE ~ 0),
cluster6 = case_when(low.level_wind >= 43 ~ 1,
TRUE ~ 0))
cluster0 = wind_speed %>% filter(low.level_wind <= 22)
cluster1 = wind_speed %>% filter(cluster1 == 1)
cluster2 = wind_speed %>% filter(cluster2 == 1)
cluster3 = wind_speed %>% filter(cluster3 == 1)
cluster4 = wind_speed %>% filter(cluster4 == 1)
cluster5 = wind_speed %>% filter(cluster5 == 1)
cluster6 = wind_speed %>% filter(cluster6 == 1)
prob = 0.95
t0 = quantile(cluster0$surface_wind, prob = prob)
t1 = quantile(cluster1$surface_wind, prob = prob)
t2 = quantile(cluster2$surface_wind, prob = prob)
t3 = quantile(cluster3$surface_wind, prob = prob)
t4 = quantile(cluster4$surface_wind, prob = prob)
t5 = quantile(cluster5$surface_wind, prob = prob)
t6 = quantile(cluster6$surface_wind, prob = prob)
x = c(1, 2, 3, 4, 5, 6, 7)
threshold = c(t0, t1, t2, t3, t4, t5, t6)
temp = data.frame(x, threshold)
ggplot(temp, aes(x = x, y = threshold)) +
geom_point(color = "darkgreen", size = 3) + geom_line() +
labs(title = "Threshold Selection for each Cluster", x = "Cluster Index",
y = "Threshold (95th Percentile Winds)") +
scale_x_continuous(breaks = 1:7) +
theme_minimal()
wind_speed$cluster1
sum(wind_speed$cluster1)
sum(wind_speed$cluster1)/42
sum(wind_speed$cluster2)/42
sum(wind_speed$cluster3)/42
sum(wind_speed$cluster4)/42
sum(wind_speed$cluster5)/42
sum(wind_speed$cluster6)/42
wind_speed
sum(wind_speed$cluster5)
sum(wind_speed$cluster5)/42
sum(wind_speed$cluster1)/42
sum(wind_speed$cluster2)/42
sum(wind_speed$cluster3)/42
sum(wind_speed$cluster4)/42
sum(wind_speed$cluster5)/42
sum(wind_speed$cluster6)/42
sum(wind_speed$cluster5)/42
sum(wind_speed$cluster1)/42 + sum(wind_speed$cluster2)/42 + sum(wind_speed$cluster3)/42 + sum(wind_speed$cluster4)/42 + sum(wind_speed$cluster5)/42 + sum(wind_speed$cluster6)/42 + sum(wind_speed$cluster5)/42
sum(wind_speed$cluster1)/42 + sum(wind_speed$cluster2)/42 + sum(wind_speed$cluster3)/42 + sum(wind_speed$cluster4)/42 + sum(wind_speed$cluster5)/42 + sum(wind_speed$cluster6)/42
sum(wind_speed$cluster1) + sum(wind_speed$cluster2) + sum(wind_speed$cluster3) + sum(wind_speed$cluster4) + sum(wind_speed$cluster5) + sum(wind_speed$cluster6)
sum(wind_speed$cluster1)/42 + sum(wind_speed$cluster2)/42 + sum(wind_speed$cluster3)/42 + sum(wind_speed$cluster4)/42 + sum(wind_speed$cluster5)/42 + sum(wind_speed$cluster6)/42
length(wind_speed) - (sum(wind_speed$cluster1) + sum(wind_speed$cluster2) + sum(wind_speed$cluster3) + sum(wind_speed$cluster4) + sum(wind_speed$cluster5) + sum(wind_speed$cluster6))
length(wind_speed[, 1]) - (sum(wind_speed$cluster1) + sum(wind_speed$cluster2) + sum(wind_speed$cluster3) + sum(wind_speed$cluster4) + sum(wind_speed$cluster5) + sum(wind_speed$cluster6))
sum(wind_speed$cluster1)/42 + sum(wind_speed$cluster2)/42 + sum(wind_speed$cluster3)/42 + sum(wind_speed$cluster4)/42 + sum(wind_speed$cluster5)/42 + sum(wind_speed$cluster6)/42 + 12895/42
clusters = c(1, 2, 3, 4, 5, 6, 7)
prop_0 = 1 - mean(wind_speed$cluster1) - mean(wind_speed$cluster2) - mean(wind_speed$cluster3) - mean(wind_speed$cluster4) - mean(wind_speed$cluster5) - mean(wind_speed$cluster6)
prop = c(prop_0, mean(wind_speed$cluster1), mean(wind_speed$cluster2), mean(wind_speed$cluster3),
mean(wind_speed$cluster4), mean(wind_speed$cluster5), mean(wind_speed$cluster6))
cond_rl = function(z, k, fit) {
params = fit$results$par
if(k != 1) {
mu = params["mu0"] + params[k]
} else {
mu = params["mu0"]
}
sigma = params["scale"]
xi = params["shape"]
return(1 - pevd(z, loc = mu, scale = sigma, shape = xi, threshold = threshold[k], type = "PP"))
}
joint_rl = function(z, fit) {
return(sum(prop * sapply(clusters, function(clusters) cond_rl(z, clusters, fit))))
}
return_period = 100 * 365
uniroot(function(z) joint_rl(z, fit10) - 1/return_period, lower = 0, upper = 100)$root
return_period = 2 * 365
clusters = c(1, 2, 3, 4, 5, 6, 7)
prop_0 = 1 - mean(wind_speed$cluster1) - mean(wind_speed$cluster2) - mean(wind_speed$cluster3) - mean(wind_speed$cluster4) - mean(wind_speed$cluster5) - mean(wind_speed$cluster6)
prop = c(prop_0, mean(wind_speed$cluster1), mean(wind_speed$cluster2), mean(wind_speed$cluster3),
mean(wind_speed$cluster4), mean(wind_speed$cluster5), mean(wind_speed$cluster6))
cond_rl = function(z, k, fit) {
params = fit$results$par
if(k != 1) {
mu = params["mu0"] + params[k]
} else {
mu = params["mu0"]
}
sigma = params["scale"]
xi = params["shape"]
return(1 - pevd(z, loc = mu, scale = sigma, shape = xi, threshold = threshold[k], type = "PP"))
}
joint_rl = function(z, fit) {
return(sum(prop * sapply(clusters, function(clusters) cond_rl(z, clusters, fit))))
}
return_period = 2 * 365
uniroot(function(z) joint_rl(z, fit10) - 1/return_period, lower = 0, upper = 100)$root
clusters = c(1, 2, 3, 4, 5, 6, 7)
prop_0 = 1 - mean(wind_speed$cluster1) - mean(wind_speed$cluster2) - mean(wind_speed$cluster3) - mean(wind_speed$cluster4) - mean(wind_speed$cluster5) - mean(wind_speed$cluster6)
prop = c(prop_0, mean(wind_speed$cluster1), mean(wind_speed$cluster2), mean(wind_speed$cluster3),
mean(wind_speed$cluster4), mean(wind_speed$cluster5), mean(wind_speed$cluster6))
cond_rl = function(z, k, fit) {
params = fit$results$par
if(k != 1) {
mu = params["mu0"] + params[k]
} else {
mu = params["mu0"]
}
sigma = params["scale"]
xi = params["shape"]
return(1 - pevd(z, loc = mu, scale = sigma, shape = xi, threshold = threshold[k], type = "PP"))
}
joint_rl = function(z, fit) {
return(sum(prop * sapply(clusters, function(clusters) cond_rl(z, clusters, fit))))
}
return_period = 100 * 7
uniroot(function(z) joint_rl(z, fit10) - 1/return_period, lower = 0, upper = 100)$root
return.level(fit1, return.period = c(2, 20, 50, 100, 500), do.ci=TRUE)
temp_fit = fevd(surface_wind, wind_speed, threshold = 8.5, type = "PP")
temp_fit
#return.level(fit1, return.period = c(2, 20, 50, 100, 500), do.ci=TRUE)
temp_fit = fevd(surface_wind, wind_speed, threshold = 8.5, type = "PP")
temp_fit
#return.level(fit1, return.period = c(2, 20, 50, 100, 500), do.ci=TRUE)
temp_fit = fevd(surface_wind, wind_speed, threshold = 8.5, type = "PP")
mu0 = temp_fit$results$par['location']
sig0 = temp_fit$results$par['scale']
xi0 = temp_fit$results$par['shape']
z_grid <- seq(0, 16, length.out = 200)  # choose sensible range
sur_uncond <- sapply(z_grid, joint_rl)
# stationary model survival: if you fitted a stationary GEV 'fit_stat' and extracted mu0,sig0,xi0:
sur_stat <- 1 - pgev(z_grid, loc = mu0, scale = sig0, shape = xi0)
plot(z_grid, sur_uncond, type='l', log='y', ylim = range(c(sur_uncond, sur_stat), na.rm=TRUE),
xlab='z', ylab='Survival (log scale)')
lines(z_grid, sur_stat, lty=2)
legend('topright', legend=c("Unconditional (mixed)", "Stationary fit"), lty=c(1,2))
z_grid <- seq(0, 16, length.out = 200)  # choose sensible range
sur_uncond <- sapply(z_grid, joint_rl)
# stationary model survival: if you fitted a stationary GEV 'fit_stat' and extracted mu0,sig0,xi0:
sur_stat <- 1 - pgev(z_grid, loc = mu0, scale = sig0, shape = xi0)
z_grid <- seq(0, 16, length.out = 200)  # choose sensible range
sur_uncond <- sapply(z_grid, joint_rl)
z_grid <- seq(0, 16, length.out = 200)  # choose sensible range
sur_uncond <- sapply(z_grid, function(z_grid) joint_rl(z_grid, fit10))
# stationary model survival: if you fitted a stationary GEV 'fit_stat' and extracted mu0,sig0,xi0:
sur_stat <- 1 - pgev(z_grid, loc = mu0, scale = sig0, shape = xi0)
plot(z_grid, sur_uncond, type='l', log='y', ylim = range(c(sur_uncond, sur_stat), na.rm=TRUE),
xlab='z', ylab='Survival (log scale)')
lines(z_grid, sur_stat, lty=2)
legend('topright', legend=c("Unconditional (mixed)", "Stationary fit"), lty=c(1,2))
